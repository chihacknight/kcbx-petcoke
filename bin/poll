#!/usr/bin/env node

var cwd = process.cwd();
require(cwd + "/lib/env");

var async = require('async');
var cache = require("memjs").Client.create();
var constants = require(cwd + "/lib/constants");
var evt = require(cwd + "/services/events");
var moment = require('moment');
var notifications = require(cwd + "/services/notifications");
var qryLat = constants.station_location.lat;
var qryLng = constants.station_location.lng;
var smsSubscribers = require(cwd + "/services/smsSubscriber");
var weather = require(cwd + "/services/weather");
var _ = require('lodash');

weather.getForecast(qryLat, qryLng, function(fcErr, fc) {
  if (fcErr)
    return console.error(fcErr);

  var hazardous = _.find(constants.WIND_STATUS_TERMS, {"term": "Hazardous"});

  shouldSendBroadcast(fc, function(err, shouldSend, lastSent){
    if (err) console.error(err)

    if (!shouldSend) {
      cache.close();
      evt.emit('pollFinished')
      if (lastSent) {
        console.log("Notification already sent at " + lastSent.format());
      }
      return;
    }


    // Setting cache before sending notification.
    // if script times out or something else unforeseen happens, we don't
    // want to be sending notifications every 10 minutes because the cache
    // isn't being set.
    cache.set("notifications.last_wind_notice_sent", moment().format(), function(){

      notifications.broadcast(constants.alertMessage, function(err){
        evt.emit("pollFinished");
        cache.close();

        if (err) {
          return console.error(err);
        }

      })
    });

  })




  function shouldSendBroadcast(fc, callback) {

    // if testing, return true (via lastSent check)
    if (process.env.TEST_POLL_SCRIPT === 'true') {
      return checkLastSent(callback);
    }

    // if it's before 8am or after 9pm, return false
    var hour = moment().hour();
    if (hour < 8 || hour > 20)
      return callback(null, false);

    // if forecast demands it, return true (via lastSent check)
    if (fc && fc.currently.wind_speed >= hazardous.threshold) {
      return checkLastSent(callback);
    }

    // otherwise...
    return callback(null, false);
  }



  function checkLastSent(callback) {
    cache.get("notifications.last_wind_notice_sent", function(cacheErr, lastSent){
      if (cacheErr) { return callback(cacheErr); }

      var lastSentMoment;
      var shouldSend = true;
      // Don't send again if sent within threshold defined in constants.js
      if (lastSent) {
        var now = moment();
        lastSentMoment = moment(lastSent.toString());
        var hoursSinceLast = now.diff(lastSentMoment, 'hours');

        shouldSend = (hoursSinceLast >= constants.notification_rate_limit);
      }

      callback(cacheErr, shouldSend, lastSentMoment);
    })
  }

});
